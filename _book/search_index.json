[
["index.html", "R for Data Science Solutions Welcome References", " R for Data Science Solutions Joshua Goldberg 2018-10-30 Welcome This book contains my solutions for the book R for Data Science. While the website for R for Data Science is free, a physical copy is available for purchase on amazon. References Wickham, Hadley, and Garrett Grolemund. 2017. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. 1st ed. O’Reilly Media. "],
["introduction.html", "1 Introduction Acknowledgments", " 1 Introduction Acknowledgments These solutions were inspired by the remarkable detail and quality of this truly fantastic and accessible book written by Garrett Grolemund and Hadley Wickham. In some cases, I have referenced the wonderful and complete solutions by Jeffrey B. Arnold, which is licensed under a Creative Commons Attribution 4.0 International License. "],
["explore-intro.html", "2 Introduction", " 2 Introduction No exercises. "],
["data-visualization.html", "3 Data visualization 3.1 Introduction 3.2 First steps 3.3 Aesthetic mappings 3.4 Facets 3.5 Geometric Objects 3.6 Statistical transformation 3.7 Position adjustments 3.8 Coordinate systems", " 3 Data visualization 3.1 Introduction library(tidyverse) library(gridExtra) library(maps) library(mapproj) 3.2 First steps 3.2.1 Exercise Run ggplot(data = mpg). What do you see? An empty plot with a background constructed by ggplot. ggplot(data = mpg) 3.2.2 Exercise How many rows and columns are in mtcars? data(mtcars) dim(mtcars) #&gt; [1] 32 11 3.2.3 Exercise What does the drv variable describe? f = front-wheel drive, r = rear wheel drive, 4 = 4wd ?mpg 3.2.4 Exercise Make a scatter-plot of hwy versus cyl. ggplot(aes(x = cyl, y = hwy), data = mpg) + geom_point() 3.2.5 Exercise What happens if you make a scatter-plot of class versus drv? Why is the plot not useful? It just displays which class a particular drv falls under, or the reverse. Vertical axis against/versus Horizontal axis. ggplot(aes(x = drv, y = class), data = mpg) + geom_point() 3.3 Aesthetic mappings 3.3.1 Exercise What’s gone wrong with this code? Why are the points not blue? Because color is inside the aesthetic wrapper. ggplot(data = mpg) + geom_point(aes(x = displ, y = hwy, color = &#39;blue&#39;)) 3.3.2 Exercise Which variables in mpg are categorical? Which variables are continuous? How can you see this information when you run mpg? Categorical: manufacturer, model, trans, drv, fl, class. Continuous: displ, year, cyl, cty, hwy Review the labels under the column headers when looking for the type of variable. glimpse(mpg) #&gt; Observations: 234 #&gt; Variables: 11 #&gt; $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;... #&gt; $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 qua... #&gt; $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0,... #&gt; $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1... #&gt; $ cyl &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6... #&gt; $ trans &lt;chr&gt; &quot;auto(l5)&quot;, &quot;manual(m5)&quot;, &quot;manual(m6)&quot;, &quot;auto(av)... #&gt; $ drv &lt;chr&gt; &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;,... #&gt; $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 1... #&gt; $ hwy &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 2... #&gt; $ fl &lt;chr&gt; &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;,... #&gt; $ class &lt;chr&gt; &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;comp... 3.3.3 Exercise Map a continuous variable to color, size, and shape. How do these aesthetics behave differently for categorical versus continuous variables? Categorical variables are assigned distinct colors. Continuous variables are assigned ‘scaling’ colors. In other words, a color that slides between a spectrum, aiding to the continuous nature of the variable. With shapes, continuous variables cannot be assigned. ggplot kicks back an error. glimpse(mpg) #&gt; Observations: 234 #&gt; Variables: 11 #&gt; $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;... #&gt; $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 qua... #&gt; $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0,... #&gt; $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1... #&gt; $ cyl &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6... #&gt; $ trans &lt;chr&gt; &quot;auto(l5)&quot;, &quot;manual(m5)&quot;, &quot;manual(m6)&quot;, &quot;auto(av)... #&gt; $ drv &lt;chr&gt; &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;,... #&gt; $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 1... #&gt; $ hwy &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 2... #&gt; $ fl &lt;chr&gt; &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;,... #&gt; $ class &lt;chr&gt; &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;comp... ggplot(aes(x = displ, y = hwy), data = mpg) + geom_point(aes(color = model)) ggplot(aes(x = displ, y = hwy), data = mpg) + geom_point(aes(color = cty)) 3.3.4 Exercise What happens if you map the same variable to multiple aesthetics? It seems to map all the aesthetics specified. ggplot(aes(x = displ, y = hwy), data = mpg) + geom_point(aes(color = manufacturer, shape = manufacturer, size = manufacturer)) #&gt; Warning: Using size for a discrete variable is not advised. #&gt; Warning: The shape palette can deal with a maximum of 6 discrete values #&gt; because more than 6 becomes difficult to discriminate; you have #&gt; 15. Consider specifying shapes manually if you must have them. #&gt; Warning: Removed 112 rows containing missing values (geom_point). 3.3.5 Exercise What does the strike aesthetic do? What shapes does it work with? (Hint: use ?geom_point.) It modifies the width the border. It only works on shapes with borders (like 21). ?geom_point ggplot(aes(x = displ, y = hwy), data = mpg) + geom_point(aes(color = cyl), shape = 21, fill = &#39;white&#39;, stroke = 1) 3.3.6 Exercise What happens if you map an aesthetic to something other than a variable name, like aes(color = displ &lt; 5)? Ggplot performs the operation and charts the outcome. Note, if relational operators are used, booleans are graphed. ggplot(aes(x = displ + 5, y = hwy), data = mpg) + geom_point() 3.4 Facets 3.4.1 Exercise What happens if you facet a continuous variable? It basically created separate plots sectioning off the continuous data point. ggplot(aes(x = displ, y = hwy), data = mpg) + geom_point(aes(x = displ, y = hwy)) + facet_wrap(~ cyl, nrow = 2) 3.4.2 Exercise What do the empty cells in a plot with facet_grid(drv ~ cyl) mean? How do they relate to this plot? The empty plots indicate that there is not a data point where both values are TRUE or available. For example, there are no 4wd cars that are 5 cyl. The facet_grid also shows this as an empty plot. ggplot(aes(x= drv, y = cyl), data = mpg) + geom_point() 3.4.3 Exercise What plots does the follow code make? What does . do? They make facet plots. When . is included on the first graph, it allows for horizontal faceting. ggplot(data = mpg) + geom_point(aes(x = displ, y = hwy)) + facet_grid(drv ~ .) ggplot(data = mpg) + geom_point(aes(x = displ, y = hwy)) + facet_grid(. ~ cyl) 3.4.4 Exercise Take the first faceted plot in this section: ggplot(data = mpg) + geom_point(aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 2) What are the advantages to using faceting instead of the color aesthetic? What are the disadvantages? How might the balance change if you had a larger data set? Advantages: faceting allows for an isolating view of the variables observed. In other words, it reduces the potential noise and increases the readability for a particular variable. Disadvantages: on the other hand, using the color aesthetic is natural to the human eye, and immediately draws on pattern recognition. If data sets were too large (too wide), faceting would not work given the limitation of screen real estate. 3.4.5 Exercise Read ?facet_wrap. What does nrow do? What does ncol do? What other options control the layout of the individual panels? Why doesn’t facet_grid() have nrow and ncol variables? Nrow and ncol control the number of dimensions of a faceted visualization. Facet grid excludes nrow and ncol because it is specifically for two discrete variables. Therefore, the rows and columns must be divisible by two. ?facet_wrap Control the number of rows and columns with nrow and ncol ggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(~class, nrow = 4) Facet by multiple variables ggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(~ cyl + drv) Use the labeller option to control how labels are printed: ggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(c(&quot;cyl&quot;, &quot;drv&quot;), labeller = &quot;label_both&quot;) Free scales ggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(~class, scales = &quot;free&quot;) 3.4.6 Exercise When using facet_grid() you should usually put the variable with more unique levels in the columns. Why? It is visually easier to compare across columns. 3.5 Geometric Objects You can set the linetype aesthetic to a particular variable ggplot(aes(x = displ, y = hwy), data = mpg) + geom_smooth(aes(linetype = drv)) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; 3.5.1 Exercise What geom would you use to draw a line chart? A boxplot? A histogram? An area chart? ggplot(aes(x = displ, y = hwy), data = mpg) + geom_line() ggplot(aes(x = drv, y = hwy), data = mpg) + geom_boxplot() ggplot(aes(x = displ), data = mpg) + geom_histogram(binwidth = .25) ggplot(aes(x = displ, y = hwy), data = mpg) + geom_area() 3.5.2 Exercise Run this code in your head and predict what the output will look like. Then run the code in R and check your predictions: ggplot( data = mpg, aes(x = displ, y = hwy, color = drv) ) + geom_point() + geom_smooth(se = FALSE) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; 3.5.3 Exercise What does show.legend = FALSE do? What happens if you remove it? Why do you think I used it earlier in the chapter? It removes the legend. show.legend was used earlier because three visualizations were plotted together, so the legend would not have applied to all three. Or three legends would have looked messy. ggplot( data = mpg, aes(x = displ, y = hwy, color = drv) ) + geom_point(show.legend = FALSE) + geom_smooth(show.legend = FALSE) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; 3.5.4 Exercise What does se argument for geom_smooth() do? It controls the display of the confidence interval. It’s TRUE by default. 3.5.5 Exercise Will these two graphs look different? Why/why not? Yes. They have the same data and aesthetic. The first syntax is defined globally. The second is defined locally. Same arguments and data though. plot_1.4.5.2 &lt;- ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + geom_smooth() plot_1.4.5.1 &lt;- ggplot() + geom_point( data = mpg, aes(x = displ, y = hwy) ) + geom_smooth( data = mpg, aes(x = displ, y = hwy) ) grid.arrange(plot_1.4.5.1, plot_1.4.5.2, nrow = 1) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; 3.5.6 Exercise Re-create the R code necessary to generate the following graphs. plot_1.4.6.1.1 &lt;- ggplot(aes(x = displ, y = hwy), data = mpg) + geom_point() + geom_smooth(se = FALSE) plot_1.4.6.1.2 &lt;-ggplot(aes(x = displ, y = hwy), data = mpg) + geom_point() + geom_smooth(aes(group = drv), se = FALSE) grid.arrange(plot_1.4.6.1.1, plot_1.4.6.1.2, nrow = 1) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; plot_1.4.6.2.1 &lt;- ggplot(aes(x = displ, y = hwy, color = drv), data = mpg) + geom_point() + geom_smooth(se = FALSE) plot_1.4.6.2.2 &lt;-ggplot(aes(x = displ, y = hwy), data = mpg) + geom_point(aes(color = drv)) + geom_smooth(se = FALSE) grid.arrange(plot_1.4.6.2.1, plot_1.4.6.2.2, nrow = 1) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; plot_1.4.6.3.1 &lt;- ggplot(aes(x = displ, y = hwy, color = drv), data = mpg) + geom_point() + geom_smooth(aes(linetype = drv), se = FALSE) plot_1.4.6.3.2 &lt;-ggplot(aes(x = displ, y = hwy), data = mpg) + geom_point(aes(color = drv)) grid.arrange(plot_1.4.6.3.1, plot_1.4.6.3.2, nrow = 1) #&gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; 3.6 Statistical transformation 3.6.1 Exercise What is the default geom associated with stat_summary()? How could you rewrite the previous plot to use that geom function instead of the stat function? The default is geom_point range. ggplot(data = diamonds) + geom_pointrange( aes(x = cut, y = depth), stat = &#39;summary&#39;, fun.ymin = min, fun.ymax = max, fun.y = median ) 3.6.2 Exercise What does geom_col() do? How is it different to geom_bar()? The geom_col function uses stat_identity by default, which basically means it uses the data available provided by y =. Conversely, geom_bar uses stat_count, transforming the data and plotting the frequency (or proportion, if designated) of the x variable. Most geoms and stats come in pairs that are almost always used in concert. Read through the documentation and make a list of all the pairs. What do they have in common? Check ggplot2 documentation What variables does stat_smooth() compute? What parameters control its behavior? y: predicted value ymin: lower pointwise confidence interval around the mean ymax: upper pointwise confidence interval around the mean se: standard error 3.6.3 Exercise In our proportion bar chart, we need to set group = 1. Why? In other words, what is the problem with these two graphs? Without the group designation, geom_bar calculates the proportion relative to x, rather than all the variables combined. That’s why each graph below displays 100%. ggplot(data = diamonds) + geom_bar(aes(x = cut, y = ..prop..)) ggplot(data = diamonds) + geom_bar( aes(x = cut, fill = color, y = ..prop..) ) 3.7 Position adjustments 3.7.1 Exercise What is the problem with this plot? How could you improve it? The values look discrete when continuous variables are being displayed. We can add some noise and reduce the alpha to make it more visually appealing as a scatter-plot. ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point() ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point(position = &#39;jitter&#39;, alpha = 1/2) 3.7.2 Exercise What parameters to geom_jitter() control the amount of jittering? Width and Height. Width controls the amount of vertical and horizontal jitter in both positive and negative directions. ggplot(mpg, aes(cyl, hwy)) + geom_jitter() ggplot(mpg, aes(cyl, hwy)) + geom_jitter(width = 0.25) ggplot(mpg, aes(cty, hwy)) + geom_jitter() ggplot(mpg, aes(cty, hwy)) + geom_jitter(width = 0.5, height = 0.5) 3.7.3 Exercise Compare and contrast geom_jitter() with geom_count(). geom-jitter adds noise to points to remove discreteness. geom_count counts the number of observations at each location, and then maps the count to the point area. In other words, it stacks any overplotting on itself and provisions it by size. 3.7.4 Exercise What’s the default position adjustment for geom_boxplot? Create a visualization of the mpg data set that demonstrates it. position = 'dodge' is the default position. ggplot(data = mpg) + geom_boxplot(aes(x = drv, y = hwy, color = manufacturer)) 3.8 Coordinate systems 3.8.1 Exercise Turn a stacked bar chart into a pie chart using coord_polar(). ggplot(data = diamonds) + geom_bar(aes(x = clarity, fill = cut)) + coord_polar() 3.8.2 Exercise What does labs() do? Read the documentation. The labs() function controls numerous text aesthetics of visualizations, including title, subtitle, caption, x axis label, and y axis label. Examples below from the documentation. p &lt;- ggplot(mtcars, aes(mpg, wt, colour = cyl)) + geom_point() p + labs(colour = &quot;Cylinders&quot;) p + labs(x = &quot;New x label&quot;) # The plot title appears at the top-left, with the subtitle # display in smaller text underneath it p + labs(title = &quot;New plot title&quot;) p + labs(title = &quot;New plot title&quot;, subtitle = &quot;A subtitle&quot;) # The caption appears in the bottom-right, and is often used for # sources, notes or copyright p + labs(caption = &quot;(based on data from ...)&quot;) 3.8.3 Exercise What is the difference between coord_quickmap() and coord_map? coord_quickmap() preserves straight lines with a quick approximation, and fixes aspect ratio. coord_map can be used to include map projects. See below from the documentation. nz &lt;- map_data(&quot;nz&quot;) # Prepare a map of NZ nzmap &lt;- ggplot(nz, aes(x = long, y = lat, group = group)) + geom_polygon(fill = &quot;white&quot;, colour = &quot;black&quot;) # Plot it in cartesian coordinates nzmap # With correct mercator projection nzmap + coord_map() # With the aspect ratio approximation nzmap + coord_quickmap() # Other projections nzmap + coord_map(&quot;cylindrical&quot;) nzmap + coord_map(&quot;azequalarea&quot;, orientation = c(-36.92, 174.6, 0)) nzmap + coord_map(&quot;lambert&quot;, parameters = c(-37, -44)) states &lt;- map_data(&quot;state&quot;) usamap &lt;- ggplot(states, aes(long, lat, group = group)) + geom_polygon(fill = &quot;white&quot;, colour = &quot;black&quot;) 3.8.4 Exercise What does the following plot tell you about the relationship between city and highway mpg? Why is coord_fixed() important? What does geom_abline() do? The relationship is positive and looks pretty linear. coord_fixed() stipulates the aspect ratio to keep plots balanced. geom_abline() adds a reference line. ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point() + geom_abline() + coord_fixed(ratio = 1) "],
["workflow-basics.html", "4 Workflow: basics", " 4 Workflow: basics No exercises. "],
["data-transformation.html", "5 Data transformation 5.1 Introduction 5.2 Filter rows with filter()", " 5 Data transformation 5.1 Introduction library(&quot;nycflights13&quot;) library(&quot;tidyverse&quot;) 5.2 Filter rows with filter() Exercise 5.2.4.1 Find all flights that Had an arrival delay of two or more hours Flew to Houston (IAH or HOU) Were operated by United, American, or Delta Departed in summer (July, August, and September) Arrived more than two hours late, but didn’t leave late Were delayed by at least an hour, but made up over 30 minutes in flight Departed between midnight and 6am (inclusive) The answer to each part follows. Using a couple of functions to knowledge, including arrange() and %&gt;% (pipe). More on pipe later. Viewed the data ? and glimpse() before constructing filter() functions. data(&#39;flights&#39;) glimpse(flights) #&gt; Observations: 336,776 #&gt; Variables: 19 #&gt; $ year &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013,... #&gt; $ month &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,... #&gt; $ day &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,... #&gt; $ dep_time &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 55... #&gt; $ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 60... #&gt; $ dep_delay &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2... #&gt; $ arr_time &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 7... #&gt; $ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 7... #&gt; $ arr_delay &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -... #&gt; $ carrier &lt;chr&gt; &quot;UA&quot;, &quot;UA&quot;, &quot;AA&quot;, &quot;B6&quot;, &quot;DL&quot;, &quot;UA&quot;, &quot;B6&quot;, &quot;EV&quot;,... #&gt; $ flight &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79... #&gt; $ tailnum &lt;chr&gt; &quot;N14228&quot;, &quot;N24211&quot;, &quot;N619AA&quot;, &quot;N804JB&quot;, &quot;N668DN... #&gt; $ origin &lt;chr&gt; &quot;EWR&quot;, &quot;LGA&quot;, &quot;JFK&quot;, &quot;JFK&quot;, &quot;LGA&quot;, &quot;EWR&quot;, &quot;EWR&quot;... #&gt; $ dest &lt;chr&gt; &quot;IAH&quot;, &quot;IAH&quot;, &quot;MIA&quot;, &quot;BQN&quot;, &quot;ATL&quot;, &quot;ORD&quot;, &quot;FLL&quot;... #&gt; $ air_time &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138... #&gt; $ distance &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 94... #&gt; $ hour &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5,... #&gt; $ minute &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, ... #&gt; $ time_hour &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013... ?flights filter(flights, arr_delay &gt;= 120) %&gt;% arrange(arr_delay) #&gt; # A tibble: 10,200 x 19 #&gt; year month day dep_time sched_dep_time dep_delay arr_time #&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; #&gt; 1 2013 1 2 1806 1629 97 2008 #&gt; 2 2013 1 10 1801 1619 102 1923 #&gt; 3 2013 1 13 1958 1836 82 2231 #&gt; 4 2013 1 13 2145 2005 100 4 #&gt; 5 2013 1 14 1652 1445 127 1806 #&gt; 6 2013 1 15 1603 1446 77 1957 #&gt; # ... with 1.019e+04 more rows, and 12 more variables: #&gt; # sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, #&gt; # tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, #&gt; # distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; Flew to Houston (IAH or HOU) filter(flights, dest %in% c(&#39;IAH&#39;, &#39;HOU&#39;)) %&gt;% arrange(dest) #&gt; # A tibble: 9,313 x 19 #&gt; year month day dep_time sched_dep_time dep_delay arr_time #&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; #&gt; 1 2013 1 1 1208 1158 10 1540 #&gt; 2 2013 1 1 1306 1300 6 1622 #&gt; 3 2013 1 1 1708 1700 8 2037 #&gt; 4 2013 1 1 2030 2035 -5 2354 #&gt; 5 2013 1 2 734 700 34 1045 #&gt; 6 2013 1 2 1156 1158 -2 1517 #&gt; # ... with 9,307 more rows, and 12 more variables: sched_arr_time &lt;int&gt;, #&gt; # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, #&gt; # origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, #&gt; # minute &lt;dbl&gt;, time_hour &lt;dttm&gt; Were operated by United, American, or Delta filter(flights, carrier %in% c(&#39;UA&#39;, &#39;AA&#39;, &#39;DL&#39;)) %&gt;% arrange(carrier) #&gt; # A tibble: 139,504 x 19 #&gt; year month day dep_time sched_dep_time dep_delay arr_time #&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; #&gt; 1 2013 1 1 542 540 2 923 #&gt; 2 2013 1 1 558 600 -2 753 #&gt; 3 2013 1 1 559 600 -1 941 #&gt; 4 2013 1 1 606 610 -4 858 #&gt; 5 2013 1 1 623 610 13 920 #&gt; 6 2013 1 1 628 630 -2 1137 #&gt; # ... with 1.395e+05 more rows, and 12 more variables: #&gt; # sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, #&gt; # tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, #&gt; # distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; Departed in summer (July, August, and September) filter(flights, month &gt;= 7, month &lt;= 9) #&gt; # A tibble: 86,326 x 19 #&gt; year month day dep_time sched_dep_time dep_delay arr_time #&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; #&gt; 1 2013 7 1 1 2029 212 236 #&gt; 2 2013 7 1 2 2359 3 344 #&gt; 3 2013 7 1 29 2245 104 151 #&gt; 4 2013 7 1 43 2130 193 322 #&gt; 5 2013 7 1 44 2150 174 300 #&gt; 6 2013 7 1 46 2051 235 304 #&gt; # ... with 8.632e+04 more rows, and 12 more variables: #&gt; # sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, #&gt; # tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, #&gt; # distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; Arrived more than two hours late, but didn’t leave late filter(flights, dep_delay &lt;= 0, arr_delay &gt; 120) #&gt; # A tibble: 29 x 19 #&gt; year month day dep_time sched_dep_time dep_delay arr_time #&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; #&gt; 1 2013 1 27 1419 1420 -1 1754 #&gt; 2 2013 10 7 1350 1350 0 1736 #&gt; 3 2013 10 7 1357 1359 -2 1858 #&gt; 4 2013 10 16 657 700 -3 1258 #&gt; 5 2013 11 1 658 700 -2 1329 #&gt; 6 2013 3 18 1844 1847 -3 39 #&gt; # ... with 23 more rows, and 12 more variables: sched_arr_time &lt;int&gt;, #&gt; # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, #&gt; # origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, #&gt; # minute &lt;dbl&gt;, time_hour &lt;dttm&gt; Were delayed by at least an hour, but made up over 30 minutes in flight filter(flights, dep_delay &gt;= 60 &amp; dep_delay - arr_delay &gt; 30) %&gt;% arrange(dep_delay, arr_delay) #&gt; # A tibble: 1,844 x 19 #&gt; year month day dep_time sched_dep_time dep_delay arr_time #&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; #&gt; 1 2013 2 26 1000 900 60 1513 #&gt; 2 2013 12 22 1030 930 60 1534 #&gt; 3 2013 7 20 1725 1625 60 1838 #&gt; 4 2013 12 27 1929 1829 60 2205 #&gt; 5 2013 6 28 1105 1005 60 1228 #&gt; 6 2013 3 10 930 830 60 1207 #&gt; # ... with 1,838 more rows, and 12 more variables: sched_arr_time &lt;int&gt;, #&gt; # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, #&gt; # origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, #&gt; # minute &lt;dbl&gt;, time_hour &lt;dttm&gt; Departed between midnight and 6 a.m. (inclusive) filter(flights, between(dep_time, 0, 600)) %&gt;% arrange(dep_time) #&gt; # A tibble: 9,344 x 19 #&gt; year month day dep_time sched_dep_time dep_delay arr_time #&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; #&gt; 1 2013 1 13 1 2249 72 108 #&gt; 2 2013 1 31 1 2100 181 124 #&gt; 3 2013 11 13 1 2359 2 442 #&gt; 4 2013 12 16 1 2359 2 447 #&gt; 5 2013 12 20 1 2359 2 430 #&gt; 6 2013 12 26 1 2359 2 437 #&gt; # ... with 9,338 more rows, and 12 more variables: sched_arr_time &lt;int&gt;, #&gt; # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, #&gt; # origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, #&gt; # minute &lt;dbl&gt;, time_hour &lt;dttm&gt; "]
]
